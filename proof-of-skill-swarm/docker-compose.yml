# docker-compose.yml
version: '3.8'

services:
  # Quantum Intent Processing
  quantum-intent-processor:
    build: ./backend/services/quantum-intent-processor
    environment:
      - PENROSE_FRAMEWORK=enabled
      - QUANTUM_SIMULATION=true
      - NATURAL_LANGUAGE_MODEL=mistral-7b-instruct
      - QDRANT_URL=http://qdrant-db:6333
      - NEURAL_NETWORK_URL=http://neural-network:3010
    ports:
      - "3001:3001"
    volumes:
      - ./quantum-state:/app/quantum-state
    depends_on:
      - qdrant-db
      - neural-network
    networks:
      - swarm-network

  # AI Challenge Generator
  challenge-generator:
    build: ./backend/services/challenge-generator
    environment:
      - MODEL_PATH=/models/codellama-13b
      - CHALLENGE_COMPLEXITY=adaptive
      - PERSONALIZATION_ENGINE=enabled
      - NEURAL_NETWORK_URL=http://neural-network:3010
      - QDRANT_URL=http://qdrant-db:6333
      - LLM_PROVIDER=${LLM_PROVIDER}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-1.5-flash}
    ports:
      - "3002:3002"
    volumes:
      - ./models:/app/models
      - ./challenges:/app/challenges
    depends_on:
      - neural-network
      - qdrant-db
    networks:
      - swarm-network

  # Task Decomposition Engine (removed - missing directory)
  # Human-AI Symbiosis Interface (removed - missing directory)

  # ZK-STARK Proof Generator
  zk-proof-generator:
    build: ./backend/services/zk-proof-generator
    environment:
      - ZK_STARK_LIB_PATH=/lib/starklib
      - POST_QUANTUM_SIG=dilithium
      - PROOF_COMPLEXITY=adaptive
      - LOGGER_URL=http://challenge-completion-logger:3011
    ports:
      - "3005:3005"
    volumes:
      - ./proofs:/app/proofs
    depends_on:
      - challenge-completion-logger
    networks:
      - swarm-network

  # Steganographic Proof Layer (removed - missing directory)

  # ERC-6551 Skill NFT System (removed - missing directory)

  # Evolution Engine (removed - missing directory)

  # Consciousness Metrics (removed - missing directory)

  # Supporting Services
  qdrant-db:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - ./qdrant-storage:/qdrant/storage
    networks:
      - swarm-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - swarm-network

  neural-network:
    build: ./backend/services/neural-network
    ports:
      - "3010:3010"
    volumes:
      - ./models:/app/models
    networks:
      - swarm-network

  python-runner:
    build: ./backend/services/python-runner
    ports:
      - "3012:3012"
    networks:
      - swarm-network

  explorer:
    build: ./backend/services/explorer
    ports:
      - "3013:3013"
    volumes:
      - ./proofs:/app/proofs
    networks:
      - swarm-network

  ethereum-node:
    image: ethereum/client-go:latest
    command: --dev --http --http.addr 0.0.0.0 --http.api eth,net,web3,personal --http.corsdomain "*"
    ports:
      - "8545:8545"
    volumes:
      - ./ethereum-data:/root/.ethereum
    networks:
      - swarm-network

  challenge-completion-logger:
    build: ./backend/services/challenge-completion-logger
    environment:
      - LOG_LEVEL=debug
      - STORAGE_PATH=/app/logs
    ports:
      - "3011:3011"
    volumes:
      - ./logs:/app/logs
    networks:
      - swarm-network

  # Frontend
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_QUANTUM_INTENT_URL=http://localhost:3001
      - REACT_APP_CHALLENGE_GENERATOR_URL=http://localhost:3002
      - REACT_APP_ZK_PROOF_URL=http://localhost:3005
      - REACT_APP_PYTHON_RUNNER_URL=http://localhost:3012
      - REACT_APP_EXPLORER_URL=http://localhost:3013
    depends_on:
      - quantum-intent-processor
      - challenge-generator
      - zk-proof-generator
    networks:
      - swarm-network

networks:
  swarm-network:
    driver: bridge

volumes:
  qdrant-storage:
  ethereum-data:
